# -*- coding: utf-8 -*-
"""TwitterSentiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vC9UKJEmkeGGbWauX_-HDudU-kDLrou_
"""

pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Importing Twitter Sentiment Dataset"""

# API to Fetch the dataset from kaggle
!kaggle datasets download -d kazanova/sentiment140

# extracting the compressed dataset
from zipfile import ZipFile
dataset ='/content/sentiment140.zip'
with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the dependenies

"""

import numpy as py
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn. linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download ('stopwords')

#print stop word in english
print(stopwords.words('english'))

"""Data processing"""

#loading the data from csv file to pandas dataframe
twitter_data= pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding = 'ISO-8859-1')

#checking the number of rows and columns
twitter_data.shape

# printing  he first 5 row of dataframe
twitter_data.head()

from tkinter.font import names
# naming the columns and reading the dataset again
coloumn_names = ['target', 'id','date', 'flag', 'user', 'text']
twitter_data= pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=coloumn_names,encoding = 'ISO-8859-1')

twitter_data.head()

twitter_data.shape

#counting the number of missing value
twitter_data.isnull().sum()

# checking distribution of target column
twitter_data['target'].value_counts()

twitter_data.replace({'target':{4:1}}, inplace= True)

# checking distribution of target column
twitter_data['target'].value_counts()

"""Negative - 0
Postive - 1

Stemming

Stemming is the process of reducing a word to its Root word
example - actor , actress , acting = act
"""

port_steam = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_steam.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ''.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

"""Seprating the data and lable - in this case data is the tweet and lable is the target column"""

X= (twitter_data['stemmed_content']).values
 Y=(twitter_data['target']).values

print(X)

print(Y)

"""splitting the data to traning data and test data"""

X_train, X_test,Y_train,Y_test=train_test_split(X, Y, test_size=0.2, stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(X_test)

print(X_train)

#converting theltextual data to numerical data
vectorizer=TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_test)

print(X_train)

"""Training the Machine Learning model

logistic Regression
"""

model = LogisticRegression(max_iter=1000)

model.fit(X_train, Y_train)

"""Model evaluation

Accuracy Score
"""

#accuracy score in taining data
X_train_prediction = model. predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)



print('Accuracy score on the training data:', training_data_accuracy)

#accuracy score in test data
X_test_prediction = model. predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print('Accuracy score on the test data:', test_data_accuracy)

"""Model accuracy = 51.9

Saving the trained model
"""



import pickle

filename = 'trained_model.sav'
pickle.dump(model,open(filename,'wb'))

